#################   1. HiveTask_1: using Json DataSet   ###########################################

1.Add the JsonSerde Jar file
-------------------------------
add jar /home/demo/Desktop/project_task/jar/hive-serdes-1.0-SNAPSHOT.jar;

hive cli prompt 
=================
hive> add jar /home/demo/Desktop/project_task/jar/hive-serdes-1.0-SNAPSHOT.jar;
Added [/home/demo/Desktop/project_task/jar/hive-serdes-1.0-SNAPSHOT.jar] to class path
Added resources: [/home/demo/Desktop/project_task/jar/hive-serdes-1.0-SNAPSHOT.jar]
==========================================================================================

2. Load the Json Dataset in Hdfs
--------------------------------
hadoop fs -mkdir /json
hadoop fs -put /home/demo/Desktop/project_task/hive_input/student1.json /json/student1.json

3.Create the Schema Depends upon DataSet
-----------------------------------------
CREATE EXTERNAL TABLE kalyan.student1_json(name string, id int, course string, year int)
ROW FORMAT SERDE 'com.cloudera.hive.serde.JSONSerDe'
location '/json';

hive cli prompt 
=================
hive> CREATE EXTERNAL TABLE kalyan.student1_json(name string, id int, course string, year int)
    > ROW FORMAT SERDE 'com.cloudera.hive.serde.JSONSerDe'
    > location '/json';
OK
Time taken: 0.085 seconds

hive> select * from kalyan.student1_json;
OK
anil	1	spark	2016
venkat	2	spark	2016
raj	3	spark	2016
sunil	4	hadoop	2015
anvith	5	hadoop	2015
dev	6	hadoop	2015
Time taken: 0.124 seconds, Fetched: 6 row(s)

4.Create Schema Json Output Table 
-----------------------------------------
CREATE EXTERNAL TABLE kalyan.student1_json_op(name string, id int, course string, year int);

hive cli prompt 
=================
hive> CREATE EXTERNAL TABLE kalyan.student1_json_op(name string, id int, course string, year int);
OK
Time taken: 0.108 seconds

5.insert the student1_json_op table from student1_json
------------------------------------------------------ 
insert into kalyan.student1_json_op(name,id, course, year) select name,id, course, year from kalyan.student1_json where id>2 and course="spark";

hive cli prompt 
=================
hive> insert into kalyan.student1_json_op(name,id, course, year) select name,id, course, year from kalyan.student1_json where id>2 and course="spark";
Query ID = demo_20170921230132_8766e1e9-e1b0-4b93-9016-658207b9a83a
Total jobs = 3
Launching Job 1 out of 3
Number of reduce tasks is set to 0 since there's no reduce operator
Starting Job = job_1506006230513_0005, Tracking URL = http://localhost:8088/proxy/application_1506006230513_0005/
Kill Command = /home/demo/work/hadoop-2.6.0/bin/hadoop job  -kill job_1506006230513_0005
Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 0
2017-09-21 23:01:39,459 Stage-1 map = 0%,  reduce = 0%
2017-09-21 23:01:46,826 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 2.71 sec
MapReduce Total cumulative CPU time: 2 seconds 710 msec
Ended Job = job_1506006230513_0005
Stage-4 is selected by condition resolver.
Stage-3 is filtered out by condition resolver.
Stage-5 is filtered out by condition resolver.
Moving data to: hdfs://localhost:8020/home/demo/work/warehouse/kalyan.db/student1_json_op/.hive-staging_hive_2017-09-21_23-01-32_381_4981617470310864651-1/-ext-10000
Loading data to table kalyan.student1_json_op
Table kalyan.student1_json_op stats: [numFiles=1, numRows=1, totalSize=17, rawDataSize=16]
MapReduce Jobs Launched: 
Stage-Stage-1: Map: 1   Cumulative CPU: 2.71 sec   HDFS Read: 4514 HDFS Write: 96 SUCCESS
Total MapReduce CPU Time Spent: 2 seconds 710 msec
OK
Time taken: 15.857 seconds

6.verify the student1_json_op table 
------------------------------------

select * from kalyan.student1_json_op;

hive cli prompt 
=================

hive> select * from kalyan.student1_json_op;
OK
raj	3	spark	2016
Time taken: 0.25 seconds, Fetched: 1 row(s)



#################################################################################################################################


//////////////////////////////////// 1. HiveTask_1: using xml////////////////////////////////////
<student><name>anil</name><id>1</id><course>spark</course><year>2016</year></student>
<student><name>venkat</name><id>2</id><course>spark</course><year>2016</year></student>
<student><name>raj</name><id>3</id><course>spark</course><year>2016</year></student>
<student><name>sunil</name><id>4</id><course>hadoop</course><year>2015</year></student>
<student><name>anvith</name><id>5</id><course>hadoop</course><year>2015</year></student>
<student><name>dev</name><id>6</id><course>hadoop</course><year>2015</year></student>

1.Add the JsonSerde Jar file
-------------------------------
create database kalyan;
use kalyan;
add jar /home/demo/Desktop/project_task/jar/hivexmlserde-1.0.5.3.jar;

2. Load the Json Dataset in Hdfs
--------------------------------
hadoop fs -mkdir /xml
hadoop fs -put /home/demo/Desktop/project_task/hive_input/student1.xml /xml/student1.xml


4.Create Schema Json Output Table 
-----------------------------------------

CREATE EXTERNAL TABLE kalyan.student1_xml(name string, id int, course string, year int)
ROW FORMAT SERDE 'com.ibm.spss.hive.serde2.xml.XmlSerDe'
WITH SERDEPROPERTIES (
"column.xpath.name"="/student/name/text()",
"column.xpath.id"="/student/id/text()",
"column.xpath.course"="/student/course/text()",
"column.xpath.year"="/student/year/text()"
)
STORED AS
INPUTFORMAT 'com.ibm.spss.hive.serde2.xml.XmlInputFormat'
OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat'
TBLPROPERTIES (
"xmlinput.start"="<student>",
"xmlinput.end"="</student>"
);

4.Load the data in to Table 
-----------------------------------------
load data inpath "/xml/student1.xml" into table kalyan.student1_xml

5.Create Schema Json Output Table 
-----------------------------------------
CREATE EXTERNAL TABLE student1_op(name string, id int, course string, year int);

6.insert the student1_json_op table from student1_op
------------------------------------------------------ 

INSERT INTO student1_op (name, id, course, year) SELECT name, id, course, year FROM student1_xml WHERE id>2 and course="spark";

7.verify the student1_op table 
------------------------------------
select * from student1_op;

//////////////////////////////////// 1. HiveTask_1: xml DataSet////////////////////////////////////








